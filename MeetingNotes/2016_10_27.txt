To try next time: iu.zoom.us
Also: Tmate - wrapper around tmux.


-- Let's talk about linear heap implementation.


-- Requirement (1) - must be pay-as-you-go.  No overhead on nonlinear programs.


bar (Just x) = x
bar Nothing = 0


Data Int = I# Int# 


Heap object layout:
https://ghc.haskell.org/trac/ghc/wiki/Commentary/Rts/Storage/HeapObjects


For let allocations: The heap where to allocate to depends on a (hidden) parameter (rho in the reduction relation given in the pdf); and on whether it’s a linear let.
For case statements: Case scrutinees can either be
unrestricted -> must come from the GC heap
Linear -> may reside on the linear heap [cannot happen in w-mode]


What about case[rho] (f x y) of (p,q) -> rhs?
In envt.   X :: ty,  x ::1 ty




{-# NOINLINE foo #-} 
foo :: Int -o Bool
Foo x = (x > 10)


-- Provided we have this:
(>) :: Int -o Int -o Bool


NB:  (foo (I# 4)), today, would pass to foo a pointer to a  heap-allocated (I# 4), already evaluated, not a thunk.


So idea: if a case scrutinises a value that might (perhaps) come from the linear heap, it deallocates the value.


-- x is a thunk that frees itself on entry
CaseLinear x::ByteString of
  -- bs is a linear pointer to evaluated ByteArray# in the linear heap?
  B# (bs ::1 ByteArray#) -> 
    (bs’, c) <- byteArrayRef# bs
    () <- freeByteArray#(bs’) -- when do we free?
    return c


Case x of (bs1, bs2) -> …
In …   bsOp# bs1
(bs1’, v) <- readBA bs1 3


COMPETITION: Taking Fluet & Morrisett 2004 seriously -- implementing ST as regions
PRO
Don’t need array ops to return “new arrays”

CON:
Returning pairs, today


f :: Int -> (Int, Int)    -- Pair is returned as a pointer to heap-alloc;’d pair
f :: Int -> (# Int, Int #)   -- Two results are returned in registers.




Representation types and representation polymorphism
Unboxed types: first class, but monomorphic




data T = MkT (# Int, Int #)


F :: (# Int, Bool #) -> Int


Int         :: TYPE LiftedPtrRep
(Int, Bool) :: TYPE LiftedPtrRep   -- *
Int#        :: TYPE IntRep        -- #
Float#      :: TYPE FloatRep    -- live in a different kind of register
(# Int, Bool #) :: TYPE [ LiftedPtrRep, LiftedPtrRep ]


error :: forall r. forall (a:: TYPE r). String -> a
error “wub” :: Int   but also
error “wub” :: Int#
/\r. /\a:r. \(x:a). Blah  -- NO NO NO


Linear thunks


Addr ----> <expr with free vars  x y>   -- free vars x y
When we BEGIN evaluation, suck x and y onto the stack and free the thunk, if we know, at allocation time, that this is a linear thunk.


Current Proposal: only heap objects of kind * live on the linear heap?
But once evaluated, where can they live? 
If we have a thunk of type ByteArray, and evaluating it creates a large ByteArray#, how do we keep the latter on the linear heap?




-- Consider TWO call sites:


1:  (let x =_1 34; r =_1 foo x in e[r]) -- may alloc on linear heap
2:  (let x =_1 34; r =_w foo x in e[r]) -- does not type check
3:  (let x =_w 34; r =_1 foo x in e[r]) -- alloc y on GC, but inside foo, may alloc on linear heap
4:  (let x =_w 12; r =_w foo x in e[r]) -- alloc on GC




-- What would a minimal function look like that allocates on both heaps?


Let x =_w True in -- on the GC heap
Let y =_1 True in -- may be on the linear heap
In ...


-- (Option 1) Specialize into two functions
1: Call_linear Foo_11 x  -- frees input and outputs to linear heap
3: Call_linear Foo_w1 y  -- outputs to linear heap, does not free input
4: Call_regular Foo_ww y 


1&3 can be the same code as long as the freeing happens inside the thunk for the input.


-- Option (2) pass a flag tracking linearity


-- for many arguments, any subset may be linear:
Foobig :: Int -o Int -o Int -o Int -o Int -o Int -o … -> Result
-- 10 bits to indicate whether each arg is in linear or GC’d heap?
 Let res =_w Foobig_w a b c d e f g h i j
 Let res =_1 Foobig_1 a b c d e f g h i j




-- Can generate code to toggle the allocation pointer (in register)
Let tmp = I# 3 in 
Let tmp = inLinear I# 3 in 


-- When do we switch to “linear mode” and how long do we stay there?






CORE


-- RHS size: {terms: 6, types: 2, coercions: 0}
foo [InlPrag=NOINLINE] :: Int -o Bool
[GblId, Arity=1, Str=DmdType]
foo = \ (x_aw2 :: Int) -> ((>) @ Int $fOrdInt) x_aw2 (I# 10#)


STG:


foo [InlPrag=NOINLINE] :: Int -o Bool
[GblId, Arity=1, Str=DmdType, Unf=OtherCon []] =
    \r srt:SRT:[rw9 :-> $fOrdInt] [x_s1Xc]
        let {
          sat_s1Xd [Occ=Once] :: Int
          [LclId, Str=DmdType] =
              NO_CCS I#! [10#];
        } in  > $fOrdInt x_s1Xc sat_s1Xd;


O2: 
----------------------------------
CORE


foo [InlPrag=NOINLINE] :: Int -> Bool
[GblId, Arity=1, Caf=NoCafRefs, Str=DmdType <S(S),1*U(U)>]
foo =
  \ (x_axl ::1 Int) ->
    case x_axl of _ [Occ=Dead] { I# x1_a28r ->
    tagToEnum# @ Bool (># x1_a28r 10#)
    }


STG:


foo [InlPrag=NOINLINE] :: Int -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=DmdType <S(S),1*U(U)>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [x_s4Aj]
        caseLINEAR x_s4Aj of _ [Linear=True,Occ=Dead] {
          -- Copy the value x1_s4A1 to the stack, at the same time 
          -- as freeing from linear heap the I# constructor.
          I# x1_s4Al [Occ=Once] ->
              case ># [x1_s4Al 10#] of sat_s4Am {
                __DEFAULT -> tagToEnum# [sat_s4Am];
              };
        };


-- What about for LARGE heap objects
------------------------------------
Bar 


    caseLINEAR x_s4Aj -- Linear thunk that returns large ByteArray#
       of _ [Linear=True,Occ=Dead] {
          -- Copy whole byterrray to the stack?
          I# x1_s4Al [Occ=Once] ->
    
